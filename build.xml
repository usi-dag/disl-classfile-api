<project
	name="disl" default="build" basedir="."
	xmlns:ivy="antlib:org.apache.ivy.ant"
	xmlns:ac="antlib:net.sf.ant-contrib"
>

	<property name="build.sysclasspath" value="ignore"/>

	<property file="disl.version"/>

	<property file="dependencies.local.properties"/>
	<property file="dependencies.properties"/>

	<property file="build.local.properties"/>
	<property file="build.properties"/>

	<condition property="javac.option.prepend" value="--patch-module java.base=" else="-Xbootclasspath/p:">
		<javaversion atleast="24"/>
	</condition>

	<!-- ================================================================== -->
	<!-- IVY SETUP & TASKS                                                  -->
	<!-- ================================================================== -->

	<!--
		Downloads the Ivy dependency manager from the Maven central repository.
	-->
	<available file="${build.ivy.path}" property="build.ivy.downloaded"/>
	<target name="-download-ivy" unless="build.ivy.downloaded">
		<mkdir dir="${lib.ant.dir}"/>
		<get src="${build.ivy.url}" dest="${build.ivy.path}" usetimestamp="true"/>
	</target>


	<!--
		Registers Ivy tasks within Ant.
	-->
	<target name="-setup-ivy" depends="-download-ivy">
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpath="${build.ivy.path}"/>
	</target>


	<!--
		Downloads dependencies for compilation. This target should allow
		unconditional execution so that the download can be always forced.
	-->
	<target name="download-deps" depends="-setup-ivy" description="Downloads dependencies for compilation.">
		<ivy:resolve conf="ant,disl,test" file="${build.ivy.file}"/>
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact].[ext]"/>
	</target>


	<!--
		Downloads dependency sources (for IDE integration).
	-->
	<target name="download-sources" depends="download-deps" description="Downloads dependency sources (for IDE integration).">
		<ivy:resolve conf="devel" file="${build.ivy.file}"/>
		<ivy:retrieve type="source" pattern="${lib.dir}/[conf]/[artifact]-[type].[ext]"/>
	</target>


	<!-- ================================================================== -->
	<!-- ARTIFACT LIST                                                      -->
	<!-- ================================================================== -->

	<!--
		Downloads dependencies and stores the list of retrieved artifacts
		so that their presence can be checked in subsequent invocations
		without Ivy. This target should allow unconditional execution so
		that the update of the artifact list can be always forced.
	-->
	<target name="update-artifact-list" depends="download-deps" description="Updates the list of expected dependency artifacts.">
		<collect-artifacts id="build.artifacts"/>

		<local name="artifacts.text"/>
		<path-to-text
			property="artifacts.text" refid="build.artifacts"
			mapfrom="${basedir}${file.separator}${lib.dir}"
			mapto="${lib.dir}"
		/>

		<echo file="${build.artifacts.list}">${artifacts.text}</echo>
	</target>


	<!--
		Determines whether the artifact list is up-to-date and sets the value
		of the 'build.artifacts.list.uptodate' property accordingly. The list
		is considered up-to-date if it contains at least one non-empty line
		and is newer than both the files describing the dependency properties.
	-->
	<target name="-check-artifact-list">
		<condition property="build.artifacts.list.uptodate"><and>
			<resourcecount when="greater" count="0">
				<tokens><concat>
					<filterchain>
						<tokenfilter><ignoreblank/></tokenfilter>
					</filterchain>
					<file file="${build.artifacts.list}"/>
				</concat></tokens>
			</resourcecount>

			<uptodate targetfile="${build.artifacts.list}">
				<srcfiles dir="${basedir}" includes="dependencies*.properties"/>
			</uptodate>
		</and></condition>
	</target>


	<!--
		Creates artifact list if it is missing or not up-to-date. This will
		trigger an initial download of artifacts so that the list is build
		from the downloaded artifacts.
	-->
	<target name="-create-artifact-list" depends="-check-artifact-list" unless="build.artifacts.list.uptodate">
		<antcall target="update-artifact-list"/>
	</target>


	<!--
		Collects downloaded artifacts into a fileset.
	-->
	<macrodef name="collect-artifacts">
		<attribute name="id"/>
		<sequential>
			<fileset dir="${basedir}" id="@{id}">
				<include name="${lib.ant.dir}/*.jar"/>
				<include name="${lib.disl.dir}/*.jar"/>
				<include name="${lib.test.dir}/*.jar"/>
			</fileset>
		</sequential>
	</macrodef>


	<!--
		Converts a path-like entity to text, one entry per line.
		Optionally performs mapping from one path prefix to another.
	-->
	<macrodef name="path-to-text">
		<attribute name="property"/>
		<attribute name="refid"/>
		<attribute name="mapfrom" default=""/>
		<attribute name="mapto" default=""/>
		<sequential>
			<pathconvert pathsep="${line.separator}" property="@{property}" refid="@{refid}">
				<map from="@{mapfrom}" to="@{mapto}"/>
			</pathconvert>
		</sequential>
	</macrodef>


	<!-- ================================================================== -->
	<!-- DEPENDENCY CHECKS                                                  -->
	<!-- ================================================================== -->

	<!--
		Determines if any of the expected artifacts are missing and sets
		the value of the 'build.artifacts.missing' property accordingly.
		This may trigger creating the list of expected artifacts after an
		initial download of dependencies.
	-->
	<target name="-check-artifacts" depends="-create-artifact-list">
		<find-missing-files file="${build.artifacts.list}" id="build.artifacts.missing.list"/>

		<condition property="build.artifacts.missing">
			<not><resourcecount refid="build.artifacts.missing.list" count="0"/></not>
		</condition>
	</target>


	<!--
		Download dependency artifacts if they are missing.
	-->
	<target name="-download-artifacts" depends="-check-artifacts" if="build.artifacts.missing">
		<antcall target="download-deps"/>
	</target>


	<!--
		Checks that none of the required artifacts are missing. This may
		trigger an initial download of dependency artifacts, but generally
		they will checked against a list of expected artifacts. If any of
		the artifacts are missing at this point, the build will fail.
	-->
	<target name="-check-deps" depends="-download-artifacts">
		<find-missing-files file="${build.artifacts.list}" id="build.artifacts.really.missing.list"/>

		<!-- Sanitize the path names of potentially missing artifacts. -->
		<local name="missing.text"/>
		<path-to-text
			property="missing.text" refid="build.artifacts.really.missing.list"
			mapfrom="${basedir}${file.separator}${lib.dir}"
			mapto="${lib.dir}"
		/>

		<!-- Fail if there are any missing artifacts. -->
		<fail message="missing artifacts${line.separator}${missing.text}${line.separator}Try running 'ant download-deps' to re-download dependencies.">
			<condition>
				<not><resourcecount refid="build.artifacts.really.missing.list" count="0"/></not>
			</condition>
		</fail>
	</target>


	<!--
		Loads a list of files and selects those that are missing.
	-->
	<macrodef name="find-missing-files">
		<attribute name="file"/>
		<attribute name="id"/>
		<sequential>
			<restrict id="@{id}">
				<resourcelist>
					<file file="@{file}"/>
				</resourcelist>
				<not><exists/></not>
			</restrict>
		</sequential>
	</macrodef>


	<!-- ================================================================== -->
	<!-- INITIALIZATION                                                     -->
	<!-- ================================================================== -->

	<!--
		Setup Ant extensions and define class paths involving both the
		downloaded artifacts and project classes.
	-->
	<target name="-init" depends="-check-deps">
		<path id="build.ant.classpath">
			<fileset dir="${lib.ant.dir}" includes="*.jar"/>
		</path>

		<taskdef resource="net/sf/antcontrib/antlib.xml" uri="antlib:net.sf.ant-contrib" classpathref="build.ant.classpath"/>

		<!-- Dependency class paths -->
		<path id="asm.classpath">
			<fileset dir="${lib.disl.dir}" includes="asm*.jar" id="asm.fileset"/>
		</path>

		<!-- Get ASM libs from ASM class path. -->
		<pathconvert pathsep=" " property="asm.libs" refid="asm.classpath">
			<mapper type="flatten"/>
		</pathconvert>

		<path id="log4j.classpath">
			<fileset dir="${lib.disl.dir}" includes="log4j*.jar"/>
		</path>

		<path id="junit.classpath">
			<fileset dir="${lib.test.dir}" includes="*.jar"/>
		</path>

		<path id="protobuf.classpath">
			<fileset dir="${lib.disl.dir}" includes="protobuf*.jar"/>
		</path>

		<path id="classgraph.classpath">
			<fileset dir="${lib.disl.dir}" includes="classgraph*.jar"/>
		</path>

		<path id="args4j.classpath">
			<fileset dir="${lib.disl.dir}" includes="args4j*.jar"/>
		</path>

		<path id="narcissus.classpath">
			<fileset dir="${lib.disl.dir}" includes="narcissus*.jar"/>
		</path>

		<!-- Get ProtoBuf Java libs from ProtoBuf class path. -->
		<pathconvert pathsep=" " property="protobuf.libs" refid="protobuf.classpath">
			<mapper type="flatten"/>
		</pathconvert>

		<!-- Project class paths -->
		<path id="util.classpath">
			<pathelement location="${build.util}"/>
		</path>

		<path id="disl.classpath">
			<pathelement location="${build.disl}"/>
			<pathelement location="${build.disl.controller}"/>
		</path>

		<path id="disl.bypass.classpath">
			<pathelement location="${build.disl.bypass}/dynamic"/>
		</path>

		<path id="shvm.classpath">
			<pathelement location="${build.shvm}"/>
			<pathelement location="${build.shvm.dispatch}"/>
		</path>
	</target>


	<!--
		Determines the names of native agent libraries.
		Mac OS X (Darwin) is considered a Unix family.
	-->
	<target name="-determine-lib-names" depends="-init">
		<ac:if>
			<os family="windows"/>
			<ac:then>
				<property name="dl.prefix" value=""/>
				<property name="dl.suffix" value=".dll"/>
				<property name="disl.agent.os" value="windows"/>
			</ac:then><ac:else>
				<ac:if>
					<os family="unix"/>
					<ac:then>
						<property name="dl.prefix" value="lib"/>
						<ac:if>
							<os name="Mac OS X"/>
							<ac:then>
								<property name="dl.suffix" value=".jnilib"/>
								<property name="disl.agent.os" value="macosx"/>
							</ac:then><ac:else>
								<property name="dl.suffix" value=".so"/>
								<property name="disl.agent.os" value="linux"/>
							</ac:else>
						</ac:if>
					</ac:then><ac:else>
						<fail message="Unsupported operating system: ${os.name}"/>
					</ac:else>
				</ac:if>
			</ac:else>
		</ac:if>

		<ac:switch value="${os.arch}" caseinsensitive="true">
			<case value="x86_64"><property name="disl.agent.arch" value="x86_64"/></case>
			<case value="amd64"><property name="disl.agent.arch" value="x86_64"/></case>
			<case value="ppc64"><property name="disl.agent.arch" value="ppc64"/></case>
			<case value="aarch64"><property name="disl.agent.arch" value="aarch64"/></case>
			<default><property name="disl.agent.arch" value="x86"/></default>
		</ac:switch>

		<property name="disl.agent.lib" value="${dl.prefix}${disl.agent.lib.base}${dl.suffix}"/>
		<property name="shvm.agent.lib" value="${dl.prefix}${shvm.agent.lib.base}${dl.suffix}"/>
	</target>


	<!--
		Looks for a class file or a source file with a given name, and
		sets the value of a given property to the fully qualified
		class name when a matching class (or source) file is found.
	-->
	<macrodef name="find-class">
		<attribute name="dir"/>
		<attribute name="name"/>
		<attribute name="property"/>
		<attribute name="suffix" default=".class"/>
		<attribute name="setonempty" default="true"/>
		<sequential>
			<pathconvert property="@{property}" setonempty="@{setonempty}">
				<fileset dir="@{dir}" includes="**/@{name}@{suffix}"/>
				<mapper type="package" from="${basedir}/@{dir}/*@{suffix}" to="*"/>
			</pathconvert>
		</sequential>
	</macrodef>


	<!-- Build tools -->

	<target name="compile-tools" depends="-init">
		<mkdir dir="${build.tools}"/>
		<javac destdir="${build.tools}" srcdir="${src.tools}" release="24">
			<compilerarg value="--enable-preview" />
			<classpath>
				<path refid="asm.classpath"/>
				<path location="${ant.core.lib}"/>
			</classpath>
		</javac>
	</target>


	<!-- DiSL bypass -->

	<!--
		To compile DiSL bypass code, we need an extended Thread class
		containing a public "bypass" field used by the dynamic bypass
		code. When running an application with DiSL instrumentation,
		the Thread class will be extended at load time, but we need
		one also for compilation.

		Here we first check if the extended Thread class exists, and
		if not, we use a thread extended from build tools to generate
		the extended Thread class.
	-->
	<!-- pathconvert property="build.disl.thread.available" setonempty="false">
		<fileset dir="." includes="${build.disl.thread}/**/Thread.class"/>
	</pathconvert -->
	<target name="-check-disl-thread">
		<condition property="build.disl.thread.available"><and>
			<available file="${build.disl.thread}/java/lang/Thread.class"/>
			<length file="${build.disl.thread}/java/lang/Thread.class" when="greater" length="1024"/>
		</and></condition>
	</target>

	<target name="-create-disl-thread-if-needed" unless="build.disl.thread.available" depends="-check-disl-thread">
		<antcall target="-create-disl-thread"/>
	</target>

	<target name="-create-disl-thread" depends="compile-tools">
		<local name="extender.class"/>
		<find-class property="extender.class" dir="${build.tools}" name="ExtendThread"/>

		<mkdir dir="${build.disl.thread}"/>
		<java classname="${extender.class}" fork="true">
			<classpath>
				<path location="${build.tools}"/>
				<path refid="asm.classpath"/>
			</classpath>
			<arg value="${basedir}/${build.disl.thread}"/>
		</java>
	</target>


	<!--
		Compile multiple versions of the bypass code: one which always
		bypasses the instrumentation, one which never bypasses the
		instrumentation, and one that checks the "bypass" field in
		the extended Thread class to determine whether to bypass the
		instrumentation or not.

		After compiling, create a file set of default bypass classes.
		The DiSL agent requires those so that instrumented application
		can find the BypassCheck class, and after switch to dynamic
		bypass performed by the agent, also the DynamicBypass class.
		The DiSL server requires both classes to create class literals
		in the weaver code.
	-->
	<target name="compile-disl-bypass" depends="-init,-create-disl-thread-if-needed">
		<ac:for list="always,never,dynamic" param="variant">
			<sequential>
				<mkdir dir="${build.disl.bypass}/@{variant}"/>
				<javac destdir="${build.disl.bypass}/@{variant}" srcdir="${src.disl.bypass}/@{variant}" debug="true" release="24">
					<compilerarg value="--enable-preview" />
					<compilerarg line="${javac.option.prepend}${basedir}/${build.disl.thread}"/>
				</javac>
			</sequential>
		</ac:for>

		<union id="disl.bypass.files">
			<fileset dir="${build.disl.bypass}/always" includes="**/BypassCheck.class"/>
			<fileset dir="${build.disl.bypass}/dynamic" includes="**/DynamicBypass.class"/>
		</union>
	</target>


	<!--
		Package the default variant of the bypass code which will
		be included in the boot classpath. By default, we include
		a BypassCheck variant that always bypasses instrumentation.
		We also include DynamicBypass class that is needed by the
		dynamic variant of the BypassCheck class, which will be
		substituted by the DiSL agent in place of the default on.
	-->
	<target name="build-disl-bypass" depends="compile-disl-bypass">
		<jar destfile="${out.lib}/${disl.bypass.lib}">
			<resources refid="disl.bypass.files"/>
		</jar>
	</target>


	<!-- Shared utility code -->

	<target name="compile-util" depends="-init">
		<mkdir dir="${build.util}"/>
		<javac destdir="${build.util}" srcdir="${src.util}" debug="true" release="24">
			<compilerarg value="--enable-preview" />
			<classpath refid="asm.classpath"/>
			<classpath refid="log4j.classpath"/>
		</javac>

		<!-- Register logging providers -->
		<!--
		<local name="service.dir"/>
		<property name="service.dir" value="${build.util}/META-INF/services"/>

		<local name="logging.package"/>
		<property name="logging.package" value="ch.usi.dag.util.logging"/>

		<local name="service.file"/>
		<property name="service.file" value="${service.dir}/${logging.package}.Provider"/>

		<mkdir dir="${service.dir}"/>
		<echo file="${service.file}" append="false">${logging.package}.JavaProvider${line.separator}</echo>
		<echo file="${service.file}" append="true">${logging.package}.Log4jProvider${line.separator}</echo>
		-->
	</target>


	<!-- DiSL -->

	<target name="compile-disl-controller">
		<mkdir dir="${build.disl.controller}"/>
		<javac destdir="${build.disl.controller}" srcdir="${src.disl.controller}" debug="true" release="24">
			<compilerarg value="--enable-preview" />
		</javac>
	</target>


	<target name="build-disl-controller" depends="compile-disl-controller">
		<jar destfile="${out.lib}/${disl.controller.lib}" basedir="${build.disl.controller}"/>
	</target>

	<target name="compile-disl" depends="compile-util,compile-disl-bypass,compile-disl-controller">
		<mkdir dir="${build.disl}"/>
		<javac destdir="${build.disl}" srcdir="${src.disl}" debug="true" release="24" >
			<compilerarg value="--enable-preview" />
			<classpath>
				<path refid="disl.bypass.classpath"/>
				<path refid="util.classpath"/>
				<path refid="asm.classpath"/>
				<path refid="protobuf.classpath"/>
			</classpath>
		</javac>
	</target>


	<target name="build-disl" depends="compile-disl,build-disl-bypass,build-disl-controller">
		<local name="server.class"/>
		<find-class property="server.class" dir="${build.disl}" name="DiSLServer"/>

		<local name="classfinder.class"/>
		<find-class property="classfinder.class" dir="${build.disl}" name="DislClassFinder"/>

		<jar destfile="${out.lib}/${disl.lib}">
			<manifest>
				<attribute name="Class-Path" value="${asm.libs} ${protobuf.libs}"/>
				<attribute name="Main-Class" value="${server.class}"/>
				<attribute name="DiSL-Version" value="${disl.version}"/>
			</manifest>

			<service type="javax.annotation.processing.Processor" provider="${classfinder.class}"/>

			<fileset dir="${build.util}"/>
			<fileset dir="${build.disl}"/>
			<resources refid="disl.bypass.files"/>
		</jar>
	</target>


	<!-- DiSL agent -->

	<!--
		The DiSL agent requires a header file containing flags for
		various code generation options. This target generates the
		header using "javac -h" after compiling DiSL.
	-->
	<target name="-check-disl-agent-codeflags">
		<property name="build.disl.agent.codeflags.path" value="${src.disl.agent}/codeflags.h"/>
		<uptodate property="build.disl.agent.codeflags.uptodate" targetfile="${build.disl.agent.codeflags.path}">
			<srcfiles dir="${src.disl}" includes="**/DiSL.java"/>
		</uptodate>
	</target>

	<target name="-generate-disl-agent-codeflags-if-needed" unless="build.disl.agent.codeflags.uptodate" depends="-check-disl-agent-codeflags">
		<antcall target="-generate-disl-agent-codeflags"/>
	</target>

	<target name="-generate-disl-agent-codeflags" depends="compile-disl">
		<delete dir="${build.disl.native}" />
		<mkdir dir="${build.disl.native}" />

		<javac srcdir="${src.disl}" destdir="${build.disl.native}" nativeheaderdir="${build.disl.native}" debug="false" includeantruntime="false" release="24">
			<include name="**/DiSL.java"/>
			<compilerarg value="--enable-preview" />
			<classpath>
				<path refid="disl.classpath"/>
				<path refid="disl.bypass.classpath"/>
				<path refid="util.classpath"/>
				<path refid="asm.classpath"/>
				<path refid="protobuf.classpath"/>
			</classpath>
		</javac>

		<concat destfile="${build.disl.agent.codeflags.path}">
			<fileset file="${build.disl.native}/*.h" />
		</concat>

		<delete dir="${build.disl.native}"/>
	</target>


	<!--
		The DiSL agent requires the bytecode of several bypass
		classes. This target generates the "bytecode.c" containing
		the necessary bytecode.
	-->
	<target name="-check-disl-agent-bytecode">
		<property name="build.disl.agent.bytecode.path" value="${src.disl.agent}/bytecode.c"/>
		<uptodate property="build.disl.agent.bytecode.uptodate" targetfile="${build.disl.agent.bytecode.path}">
			<srcfiles dir="${src.disl.bypass}"/>
		</uptodate>
	</target>

	<target name="-generate-disl-agent-bytecode-if-needed" unless="build.disl.agent.bytecode.uptodate" depends="-check-disl-agent-bytecode">
		<antcall target="-generate-disl-agent-bytecode"/>
	</target>

	<target name="-generate-disl-agent-bytecode" depends="compile-disl,compile-tools">
		<taskdef name="bytedump" classname="ch.usi.dag.disl.tools.ByteDumpTask">
			<classpath>
				<pathelement location="${build.tools}"/>
			</classpath>
		</taskdef>

		<local name="output.file"/>
		<property name="output.file" value="${build.disl.agent.bytecode.path}"/>

		<echo file="${output.file}">/**${line.separator}</echo>
		<echo file="${output.file}" append="true"> * DO NOT EDIT!${line.separator}</echo>
		<echo file="${output.file}" append="true"> *${line.separator}</echo>
		<echo file="${output.file}" append="true"> * This file was generated using the '-generate-disl-agent-bytecode' target.${line.separator}</echo>
		<echo file="${output.file}" append="true"> */${line.separator}</echo>
		<echo file="${output.file}" append="true">#include &lt;jvmti.h&gt;${line.separator}</echo>

		<ac:for param="file.path">
			<path>
				<fileset dir="${build.disl.bypass}" includes="**/BypassCheck.class"/>
				<!-- fileset dir="${build.disl.bypass}" includes="**/DynamicBypass.class" /-->
			</path>
			<sequential>
				<!-- Variant of the class, i.e., the top-level directory name. -->
				<local name="file.variant"/>
				<pathconvert property="file.variant">
					<path path="@{file.path}"/>
					<mapper type="regexp" from="${basedir}/${build.disl.bypass}/([^/]+)/.*" to="\1"/>
				</pathconvert>

				<!-- Name of the class. -->
				<local name="file.class"/>
				<pathconvert property="file.class">
					<path path="@{file.path}"/>
					<mapper type="regexp" from=".*/([^/]+).class" to="\1"/>
				</pathconvert>

				<local name="file.length"/>
				<length property="file.length" file="@{file.path}"/>

				<!-- Define a structure for each class file. -->
				<echo file="${output.file}" append="true">${line.separator}jvmtiClassDefinition ${file.variant}_${file.class}_classdef = {${line.separator}</echo>
				<echo file="${output.file}" append="true">&#9;.class_byte_count = ${file.length},${line.separator}</echo>
				<echo file="${output.file}" append="true">&#9;.class_bytes = (unsigned char *)${line.separator}</echo>
				<bytedump
					srcFile="@{file.path}" destFile="${output.file}" append="true"
					blockLength="16"  byteFormat="\x%02x"
					blockPrefix="&#9;&#9;&quot;" blockSuffix="&quot;${line.separator}" lastSuffix="&quot;,${line.separator}"
				/>
				<echo file="${output.file}" append="true">};${line.separator}</echo>
			</sequential>
		</ac:for>
	</target>


	<target name="prepare-disl-agent" depends="-generate-disl-agent-codeflags-if-needed,-generate-disl-agent-bytecode-if-needed"/>


	<target name="compile-disl-agent" depends="prepare-disl-agent">
		<exec executable="make" dir="${src.disl.agent}"/>
	</target>


	<!--
		This target cross-compiles the DiSL agent library for
		Windows using MinGW. It is currently not used in the
		default build, but should be used for binary releases.
	-->
	<target name="compile-disl-agent-mingw" depends="prepare-disl-agent">
		<exec executable="make" dir="${src.disl.agent}">
			<arg value="WHOLE=1"/>
			<arg value="TARGET_ENV=MinGW"/>
		</exec>
	</target>


	<target name="build-disl-agent" depends="compile-disl-agent,-determine-lib-names">
		<copy file="${src.disl.agent}/${disl.agent.os}-${disl.agent.arch}/${disl.agent.lib}" todir="${out.lib}"/>
	</target>


	<!-- Shadow VM -->

	<target name="compile-shvm-dispatch">
		<mkdir dir="${build.shvm.dispatch}"/>
		<javac destdir="${build.shvm.dispatch}" srcdir="${src.shvm.dispatch}" debug="true" release="24">
			<compilerarg value="--enable-preview" />
		</javac>
	</target>


	<target name="build-shvm-dispatch" depends="compile-shvm-dispatch">
		<jar destfile="${out.lib}/${shvm.dispatch.lib}" basedir="${build.shvm.dispatch}"/>
	</target>


	<target name="compile-shvm" depends="compile-util,compile-shvm-dispatch">
		<mkdir dir="${build.shvm}"/>
		<javac destdir="${build.shvm}" srcdir="${src.shvm}" debug="true" release="24">
			<compilerarg value="--enable-preview" />
			<classpath refid="util.classpath"/>
			<classpath refid="asm.classpath"/>
			<classpath refid="disl.classpath"/>
		</javac>
	</target>


	<target name="build-shvm" depends="compile-shvm,build-shvm-dispatch">
		<local name="shvm.server.class"/>
		<find-class property="shvm.server.class" dir="${build.shvm}" name="DiSLREServer"/>

		<jar destfile="${out.lib}/${shvm.lib}">
			<manifest>
				<attribute name="Class-Path" value="${asm.libs}"/>
				<attribute name="Main-Class" value="${shvm.server.class}"/>
				<attribute name="DiSL-Version" value="${disl.version}"/>
			</manifest>

			<fileset dir="${build.util}"/>
			<fileset dir="${build.shvm}"/>
		</jar>
	</target>

	<!-- Shadow VM agent -->

	<target name="compile-shvm-agent">
		<exec executable="make" dir="${src.shvm.agent}">
			<arg value="WHOLE=1"/>
		</exec>
	</target>


	<target name="build-shvm-agent" depends="compile-shvm-agent,-determine-lib-names">
		<copy file="${src.shvm.agent}/${shvm.agent.lib}" todir="${out.lib}"/>
	</target>


	<!-- JUnit tests and DiSL/Shadow VM test suites -->

	<path id="test.classpath">
		<path refid="util.classpath"/>
		<path refid="disl.classpath"/>
		<path refid="shvm.classpath"/>
		<path refid="junit.classpath"/>
		<path refid="asm.classpath"/>
		<path refid="disl.bypass.classpath"/>
	</path>

	<target name="compile-test" depends="-init,compile-util,compile-disl,compile-shvm">
		<mkdir dir="${build.test}"/>
		<javac destdir="${build.test}" srcdir="${src.test}" debug="true" release="24">
			<compilerarg value="--enable-preview" />
			<classpath refid="test.classpath"/>
		</javac>

		<!-- Copy test resource files from source to class output directory. -->
		<copy todir="${build.test}">
			<fileset dir="${src.test}">
				<include name="**/*.resource"/>
			</fileset>
		</copy>
	</target>


	<macrodef name="package2path">
		<attribute name="package"/>
		<attribute name="property"/>
		<sequential>
			<pathconvert property="@{property}">
				<path path="@{package}"/>
				<mapper type="unpackage" from="${basedir}/*" to="*"/>
			</pathconvert>
		</sequential>
	</macrodef>


	<target name="build-test" depends="-init,compile-test">
		<property name="suite.base.pkg" value="ch.usi.dag.disl.test.suite"/>
		<package2path package="${suite.base.pkg}" property="suite.base.path"/>

		<condition property="test.suites" value="${test.name}" else="*">
			<isset property="test.name"/>
		</condition>

		<ac:for param="suite.path">
			<path>
				<dirset dir="${src.test}/${suite.base.path}">
					<include name="${test.suites}"/>
				</dirset>
			</path>
			<sequential>
				<local name="suite.name"/>
				<basename file="@{suite.path}" property="suite.name"/>
				<build-test-suite name="${suite.name}" path="${suite.base.path}/${suite.name}" pkg="${suite.base.pkg}.${suite.name}"/>
			</sequential>
		</ac:for>
	</target>


	<macrodef name="build-test-suite">
		<attribute name="name"/>
		<attribute name="path"/>
		<attribute name="pkg"/>
		<sequential>
			<!-- Package target application classes. -->
			<jar destfile="${out.test}/@{name}-app.jar">
				<fileset dir="${build.test}" includes="@{path}/app/**"/>
				<manifest>
					<attribute name="Main-Class" value="@{pkg}.app.TargetClass"/>
				</manifest>
			</jar>

			<!--
				Process annotations to find DiSL classes.

				Use an empty directory as destination for the classes to
				make the "javac" task actually execute "javac" with the
				source files. Using the normal build destination directory
				would result in "javac" task excluding all source files
				for which it could find up-to-date class files.
			-->
			<local name="classfinder.output"/>
			<tempfile property="classfinder.output" prefix="@{name}-disl-classes-" suffix=".lst" destDir="${out.dir}" createFile="true" deleteOnExit="true"/>

			<local name="classfinder.class"/>
			<find-class property="classfinder.class" dir="${build.disl}" name="DislClassFinder"/>

			<mkdir dir="${out.dir}/empty"/>
			<javac srcdir="${src.test}" destDir="${out.dir}/empty" release="24">
				<classpath refid="test.classpath"/>
				<compilerarg value="--enable-preview" />
				<compilerArg value="-proc:only"/>
				<compilerArg line="-processor ${classfinder.class}"/>
				<compilerArg value="-Adisl.classfinder.output=${classfinder.output}"/>
				<compilerArg value="-Adisl.classfinder.separator=,"/>

				<include name="@{path}/**/*.java"/>
			</javac>

			<local name="disl.classes"/>
			<loadfile property="disl.classes" srcFile="${classfinder.output}"/>

			<!-- Package instrumentation classes. -->
			<jar destfile="${out.test}/@{name}-inst.jar">
				<manifest>
					<attribute name="DiSL-Classes" value="${disl.classes}"/>
				</manifest>

				<fileset dir="${build.test}" includes="@{path}/instr/**"/>
			</jar>
		</sequential>
	</macrodef>


	<target name="test" depends="build,build-test" description="Runs all tests or a selected (-Dtest.name=...) test suite.">
		<!--
			If test.name is set to a name of a test suite, only include the test suite
			in the batch of tests to be run, otherwise include all tests and suites.
		-->
		<ac:if>
			<isset property="test.name"/>
			<ac:then>
				<echo>Running a single test suite: ${test.name}</echo>
				<fileset id="test.batch" dir="${src.test}">
					<include name="**/suite/${test.name}/junit/*Test.java"/>
				</fileset>
			</ac:then><ac:else>
			<echo>Running all tests.</echo>
			<fileset id="test.batch" dir="${src.test}">
				<include name="**/junit/*Test.java"/>
				<include name="**/disl/*Test.java"/>
				<include name="**/disl/scope/*Test.java"/>
				<include name="**/disl/util/cfg/*Test.java"/>
				<include name="**/dislreserver/shadow/*Test.java"/>
			</fileset>
		</ac:else>
		</ac:if>

		<!--
			Run the batch of junit tests and junit-wrapped test suites.
		-->
		<mkdir dir="${out.junit}"/>
		<junit haltonfailure="no" haltonerror="no" failureproperty="junit.failure">
			<jvmarg value="--enable-preview" />
			<formatter type="brief" usefile="false"/>
			<formatter type="xml"/>

			<classpath>
				<path refid="asm.classpath"/>
				<path refid="junit.classpath"/>
				<path refid="disl.bypass.classpath"/>
				<pathelement location="${build.test}"/>
				<pathelement location="${build.util}"/>
				<pathelement location="${build.disl}"/>
				<pathelement location="${build.shvm}"/>
			</classpath>

			<!-- pass properties starting with "disl.", "dislserver.", and "dislreserver." to the tests -->
			<syspropertyset>
				<propertyref prefix="disl."/>
				<propertyref prefix="dislserver."/>
				<propertyref prefix="dislreserver."/>
			</syspropertyset>

			<sysproperty key="runner.disl.lib.dir" value="${out.lib}"/>
			<sysproperty key="runner.disl.thread.dir" value="${build.disl.thread}"/>
			<sysproperty key="runner.lib.dir" value="${out.test}"/>
			<sysproperty key="runner.disl.agent.lib" value="${disl.agent.lib}"/>
			<sysproperty key="runner.shvm.agent.lib" value="${shvm.agent.lib}"/>
			<sysproperty key="runner.debug" value="${test.debug}"/>
			<sysproperty key="test.verbose" value="${test.verbose}"/>

			<batchtest fork="yes" todir="${out.junit}">
				<fileset refid="test.batch"/>
			</batchtest>
		</junit>
	</target>


	<!-- Eclipse support -->

	<target name="build-eclipse-agent">
		<local name="agent.class"/>
		<find-class property="agent.class" dir="${src.test}" name="Agent" suffix=".java"/>

		<jar destfile="${out.lib}/${eclipse.agent.lib}">
			<manifest>
				<attribute name="Premain-Class" value="${agent.class}"/>
			</manifest>
		</jar>
	</target>


	<!-- Documentation -->

	<macrodef name="pdflatex">
		<attribute name="dir" default="."/>
		<element name="exec-elements" implicit="yes"/>
		<sequential>
			<local name="pdflatex.output"/>
			<local name="pdflatex.result"/>

			<exec executable="pdflatex" dir="@{dir}" outputProperty="pdflatex.output" resultProperty="pdflatex.result">
				<exec-elements/>
			</exec>
			<fail message="${pdflatex.output}">
				<condition><isfailure code="${pdflatex.result}"/></condition>
			</fail>
		</sequential>
	</macrodef>


	<target name="check-doc">
		<property name="doc.intro.tex" value="dislintro.tex"/>
		<property name="doc.intro.pdf" value="${build.doc.intro}/dislintro.pdf"/>
		<fileset id="doc.intro.files" dir="${src.doc.intro}"/>

		<uptodate property="doc.intro.uptodate" targetFile="${doc.intro.pdf}">
			<srcfiles refid="doc.intro.files"/>
		</uptodate>
	</target>


	<target name="build-doc" depends="check-doc" unless="doc.intro.uptodate">
		<delete dir="${build.doc.intro}"/>
		<copy todir="${build.doc.intro}">
			<fileset refid="doc.intro.files"/>
		</copy>

		<echo>Compiling Introduction to Instrumentation with DiSL</echo>
		<pdflatex dir="${build.doc.intro}">
			<arg value="-draftmode"/>
			<arg value="${doc.intro.tex}"/>
		</pdflatex>

		<pdflatex dir="${build.doc.intro}">
			<arg value="${doc.intro.tex}"/>
		</pdflatex>
	</target>


	<target name="build-jdoc" depends="-init,compile">
		<mkdir dir="${out.doc.jdoc}"/>
		<javadoc destdir="${out.doc.jdoc}"
			access="public" author="true" version="true" use="true"
			noDeprecated="false" nodeprecatedlist="false"
			noIndex="false" splitIndex="true" noNavbar="false" noTree="false"
			overview="${src.doc.jdoc}/overview.html"
			source="1.8"
		>
			<sourcepath>
				<pathelement path="${src.disl}"/>
			</sourcepath>

			<sourcefiles>
				<fileset dir="${src.disl}">
					<include name="**/DiSL.java"/>
					<include name="**/Reflection.java"/>
					<include name="**/Scope.java"/>
					<include name="**/ScopeMatcher.java"/>
					<include name="**/Shadow.java"/>
					<include name="**/Transformer.java"/>
				</fileset>
				<fileset dir="${src.disl.bypass}">
					<include name="**/DynamicBypass.java"/>
				</fileset>
				<fileset dir="${src.disl.controller}">
					<include name="**/DiSLController.java"/>
				</fileset>
				<fileset dir="${src.shvm}">
					<include name="**/RemoteAnalysis.java"/>
					<include name="**/ShadowObject.java"/>
					<include name="**/ShadowString.java"/>
					<include name="**/ShadowThread.java"/>
					<include name="**/ShadowClass.java"/>
				</fileset>
				<fileset dir="${src.shvm.dispatch}">
					<include name="**/REDispatch.java"/>
				</fileset>
			</sourcefiles>

			<classpath>
				<path refid="disl.bypass.classpath"/>
				<path refid="shvm.classpath"/>
				<path refid="util.classpath"/>
				<path refid="asm.classpath"/>
			</classpath>

			<package name="ch.usi.dag.disl.annotation"/>
			<package name="ch.usi.dag.disl.marker"/>
			<package name="ch.usi.dag.disl.guardcontext"/>
			<package name="ch.usi.dag.disl.staticcontext"/>
			<package name="ch.usi.dag.disl.dynamiccontext"/>
			<package name="ch.usi.dag.disl.classcontext"/>
			<package name="ch.usi.dag.disl.processorcontext"/>
		</javadoc>
	</target>


	<!-- Miscellaneous -->

	<target name="copy-libs" depends="-init">
		<copy todir="${out.lib}" flatten="true">
			<path refid="asm.classpath"/>
			<path refid="protobuf.classpath"/>
			<path refid="classgraph.classpath"/>
			<path refid="args4j.classpath"/>
			<path refid="narcissus.classpath"/>
		</copy>
	</target>


	<target name="package-src">
		<zip destfile="${out.src}/src.zip">
			<zipfileset dir="${src.disl}"/>
			<zipfileset dir="${src.disl.bypass}/dynamic"/>
			<zipfileset dir="${src.disl.controller}"/>
			<zipfileset dir="${src.shvm}"/>
			<zipfileset dir="${src.shvm.dispatch}"/>
			<zipfileset dir="${src.util}"/>
		</zip>
	</target>


	<!-- Releases -->

	<target name="release-bin" depends="build,package-src">
		<!-- Collect the artifacts from output and source directories. -->
		<zip destfile="${release.bin.zip}">
			<zipfileset prefix="${disl.prefix}/${dist.bin}" dir="${src.bin}" fileMode="755"/>
			<zipfileset prefix="${disl.prefix}/${dist.lib}" dir="${out.lib}"/>
			<zipfileset prefix="${disl.prefix}/${dist.doc.intro}" file="${doc.intro.pdf}"/>
			<zipfileset prefix="${disl.prefix}/${dist.doc.jdoc}" dir="${out.doc.jdoc}"/>
			<zipfileset prefix="${disl.prefix}/${dist.examples}" dir="${src.examples}">
				<exclude name="build-override.properties"/>
			</zipfileset>
			<zipfileset prefix="${disl.prefix}/${dist.src}" dir="${out.src}"/>
			<zipfileset prefix="${disl.prefix}" dir=".">
				<include name="COPYING"/>
				<include name="README"/>
				<include name="USER_ERRORS"/>
			</zipfileset>
		</zip>

		<!-- Convert the zip archive to bzip2 compressed tar. -->
		<tar destfile="${release.bin.tar}" compression="bzip2">
			<zipfileset src="${release.bin.zip}"/>
		</tar>
	</target>


	<target name="release-src" depends="clean-examples">
		<zip destfile="${release.src.zip}">
			<zipfileset prefix="disl-${disl.version}" dir=".">
				<include name="${src.bin}/"/>
				<include name="${src.doc}/"/>
				<include name="${src.examples}/"/>
				<include name="${lib.dir}/README"/>
				<include name="${lib.dir}/*.lst"/>
				<include name="COPYING"/>
				<include name="README"/>
				<include name="README_TESTS"/>
				<include name="USER_ERRORS"/>
				<include name="build.properties"/>
				<include name="build.xml"/>
				<include name="dependencies.properties"/>
				<include name="${build.ivy.file}"/>
				<include name="disl.version"/>
				<include name=".settings/"/>
				<include name=".project"/>
				<include name=".classpath"/>
				<include name="eclipse.*"/>
			</zipfileset>
			<zipfileset prefix="disl-${disl.version}" dir="." includes="src*/" excludes="**/var,**/find.sh,**/*.so,**.jnilib,**/*.o"/>
			<zipfileset prefix="disl-${disl.version}" dir="." includes="src*/**/find.sh" filemode="755"/>
		</zip>

		<tar destfile="${release.src.tar}" compression="bzip2">
			<zipfileset src="${release.src.zip}"/>
		</tar>
	</target>


	<!-- Preprocessor -->
	<target name="compile-preprocessor">
		<mkdir dir="${build.preprocessor}"/>
		<javac destdir="${build.preprocessor}" srcdir="${src.preprocessor}" debug="true" release="24">
			<compilerarg value="--enable-preview" />
			<classpath refid="classgraph.classpath"/>
			<classpath refid="args4j.classpath"/>
			<classpath refid="narcissus.classpath"/>
		</javac>
	</target>

	<target name="build-preprocessor" depends="compile-preprocessor">
		<jar destfile="${out.lib}/${disl.preprocessor.lib}" basedir="${build.preprocessor}">
			<manifest>
				<attribute name="Main-Class" value="ch.usi.dag.disl.preprocessor.Parser"/>
			</manifest>
		</jar>
	</target>


	<!-- Summary targets -->
	<target name="properties" depends="-determine-lib-names">
		<echoproperties/>
	</target>

	<target name="compile" depends="compile-disl,compile-disl-agent,compile-shvm,compile-shvm-agent,compile-preprocessor" description="Compiles DiSL, Shadow VM, and the JVM agents for both."/>

	<target name="build" depends="build-disl,build-disl-agent,build-shvm,build-shvm-agent,build-preprocessor,copy-libs" description="Builds DiSL and Shadow VM, without documentation."/>

	<target name="eclipse" depends="download-sources,build-eclipse-agent,build-disl-bypass" description="Creates libraries for developing DiSL under Eclipse."/>

	<target name="doc" depends="build-doc,build-jdoc" description="Builds DiSL documentation (requires javadoc and pdflatex)."/>

	<target name="release" depends="doc,release-bin,release-src" description="Produces DiSL source and binary release archives."/>


	<!-- Clean up -->

	<target name="clean-examples">
		<ant dir="${src.examples}" target="clean"/>
	</target>


	<target name="clean" description="Removes all files produced during the build.">
		<exec executable="make" dir="${src.disl.agent}">
			<arg value="cleanall"/>
		</exec>

		<exec executable="make" dir="${src.shvm.agent}">
			<arg value="cleanall"/>
		</exec>

		<delete dir="${out.dir}"/>
	</target>


	<target name="clean-deps" description="Removes all downloaded dependency artifacts.">
		<delete dir="${lib.ant.dir}"/>
		<delete dir="${lib.disl.dir}"/>
		<delete dir="${lib.test.dir}"/>
		<delete dir="${lib.devel.dir}"/>
	</target>

</project>
